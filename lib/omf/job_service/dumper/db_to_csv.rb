require 'omf/job_service/dumper'

module OMF::JobService
  class Dumper
    # Simple example of a script to dump an entire experiment database from a
    # PostreSQL server into ZIP file, which contains a separate CSV file for
    # each table in the database
    #
    # This could be used to customise the 'Download/Dump Data' button of the
    # 'Execute' panel of Labwiki.
    #
    # This requires zip and psql command line apps to be available on the path
    class DBToCSV < Dumper
      def initialize(opts = {})
        super
        @support = "foo@foo.com" # Address to send an email if something goes wrong
        @http_location = "http://#{opts[:http_host]}/dump/#{@db_name}.zip"
        @location = "#{@@dump_folder}/#{@db_name}.zip"
      end

      def dump
        # PSQL password: either use a pgpass file or set the PGPASSWORD env variable
        begin
          # Get list of all tables from the database, filter out tables generated by
          # the OMF EC for this simple example.
          tables = `psql -h #{@@db_conn[:host]} -p #{@@db_conn[:port]} -U #{@@db_conn[:user]} #{@db_name} -c "COPY (SELECT table_name FROM information_schema.tables WHERE table_schema = 'public') TO STDOUT" | grep -v omf_ec`
          raise "Cannot open database '#{@db_name}'" if tables.nil? || tables.length==0 || tables == ''
          # Dump each table into a separate CSV file and add that to the ZIP file
          tables.each_line do |t|
            out = `psql -h #{@@db_conn[:host]} -p #{@@db_conn[:port]} -U #{@@db_conn[:user]} #{@db_name} -c "COPY (SELECT * FROM #{t.chomp}) TO STDOUT CSV HEADER" > #{t.chomp}.csv`
            `zip #{@location} #{t.chomp}.csv`
            `rm -f #{t.chomp}.csv`
            raise "Cannot export table '#{t}' (from the list: '#{tables}') - error: '#{out}'" unless out.length==0
          end
        rescue Exception => ex
          # If anything goes wrong above, generate a README file with the error
          # and its trace, and ask the user to email that to the address given above
          log="README.TXT"
          File.open(log, "w") do |f|
            f.puts("We are sorry but we could not export the database for your experiment #{@db_name}")
            f.puts("Please email this file with the error details below to #{@support}")
            f.puts("")
            f.puts("----")
            f.puts("Exception (#{ex.class}) - #{ex}")
            f.puts("#{ex.backtrace}")
          end
          `zip #{@location} README.TXT`
        end
        { success: @http_location }
      end
    end
  end
end

