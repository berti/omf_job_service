# Simple SHM Experiment 

# Note: right now da and dp-heuro always expect a config file even though it 
# is empty this is a known limitation, which Serge will fix soon.

# Define some parameters (or properties), which can be configured before
# running the experiment
defProperty('one_node', "00121", "ID of a node")
defProperty('duration', 60, "Experiment Duration")
defProperty('data_rate', 250, "Data acquisition sampling rate")
defProperty('data_range', 0, "Data acquisition range")
defProperty('heuro_period', 10, "Heuristic Algo period between events")
defProperty('heuro_threshold', 15, "Heuristic Algo event threshold")

# Define the application 'da' i.e. the Data Acquisition module
# This could be done in an external file
defApplication('da') do |a|
  a.binary_path = "/sbin/da"
  a.description = "SHM Data Acquisition Application"
  a.defProperty("config", "Path to the config file", nil, {:order =>1, :type => :string, :mandatory => true, :default => "/etc/shm/empty_config.txt"})
  a.defProperty("sampling_rate", "sampling rate, Hz. Max allowed (not granted) is 10000", '--rate', {:type => :numeric})
  a.defProperty("sensor_mask", "Set bits in the HEX value enable coresponding accelerometers", "--sensorMask", {:type => :string})
  a.defProperty("range", "Acceleration range word, as in accelerometer (BM-150) datasheet", "--rangeWord", {:type => :numeric})
  a.defProperty("bandwitdth", "Accelerometer filter bandwidth word, as in accelerometer (BM-150) datasheet", "--bandwidthWord", {:type => :numeric})
end

# Define the application 'dp heuro' i.e. the Data Processing Heuristic module
# This could be done in an external file
defApplication('shm') do |a|
  a.binary_path = "/sbin/dp-heuro"
  a.description = "SHM Data Processing running the Health Score Heuristic"
  a.defProperty("config", "Path to the config file", nil, {:order =>1, :type => :string, :mandatory => true, :default => "/etc/shm/empty_config.txt"})
  a.defProperty("threshold", "Threshold for event detection", "--threshold", {:type => :numeric})
  a.defProperty("lower_limit", "Lower limit value for K-factor computation", "--lowerLimit", {:type => :numeric})
  a.defProperty("upper_limit", "Upper limit value for K-factor computation", "--upperLimit", {:type => :numeric})
  a.defProperty("number_highest", "Number of highest peak for Heuristic computation", "--numHighest", {:type => :numeric})
  a.defProperty("event_period", "Sleep period before starting detection of the next event", "--eventPeriod", {:type => :numeric})
  a.defProperty("output", "Local filename to store DP results if needed", "--outputFile", {:type => :string})

  # For this simple example, the following MP definitions are
  # omitting the field descriptions.
  a.defMeasurement("raw_sensor_info")
  a.defMeasurement("pair_info")
  a.defMeasurement("sensor_info")
  a.defMeasurement("joint_info")
end

# Define a group of node which will run the Data Acquisition module
defGroup("Data_Producer", property.one_node) do |node|
  node.addApplication("da") do |app|
    # Set parameters to run the data acquisition with
    app.setProperty("sampling_rate", prop.data_rate)
    app.setProperty("sensor_mask", "e")
    app.setProperty("range", prop.data_range)
    app.setProperty("bandwitdth", 2)
  end
end

# Define a group of node which will run the Data Processing module
defGroup("Heuristic_Calculator", property.one_node) do |node|
  node.addApplication("shm") do |app|
    # Set parameters to run the data processing with
    app.setProperty("threshold", prop.heuro_threshold)
    app.setProperty("lower_limit", 5)
    app.setProperty("upper_limit", 20)
    app.setProperty("number_highest", 30)
    app.setProperty("event_period", prop.heuro_period)
    app.setProperty("output", "/tmp/shm_experiment.data")
    # Enable OML measurements
    app.measure('raw_sensor_info', :samples => 1)
    app.measure('pair_info', :samples => 1)
    app.measure('sensor_info', :samples => 1)
    app.measure('joint_info', :samples => 1)
  end
end

# Define what should be done in this experiment
onEvent(:ALL_UP_AND_INSTALLED) do |event|

  info "Starting a data acquisition"
  group("Data_Producer").startApplications

  after 10 do
    info "Starting a heuristic calculation"
    group("Heuristic_Calculator").startApplications
  end

  after prop.duration do
    info "Stopping all applications."
    allGroups.stopApplications
    Experiment.done
  end
end

# Define a simple graph to draw for this experiment.
defGraph 'Health Score' do |g|
  g.ms('joint_info').select {[ :oml_ts_client, :health ]}
  g.caption "Computed Health Score"
  g.type 'line_chart3'
  g.mapping :x_axis => :oml_ts_client, :y_axis => :health
  g.xaxis :legend => 'time [s]'
  g.yaxis :legend => 'Health Score', :ticks => {:format => 's'}
end

# Define a simple graph to draw for this experiment.
defGraph 'Raw Data' do |g|
  g.ms('raw_sensor_info').select {[ :oml_seq, :sensor_id, :v1 ]}
  g.caption "Raw Sensor Data"
  g.type 'line_chart3'
  g.mapping :x_axis => :oml_seq, :y_axis => :v1, :group_by => :sensor_id
  g.xaxis :legend => 'Sample ID'
  g.yaxis :legend => 'V1 value', :ticks => {:format => 's'}
end
